GGPLOT2 Chapter7
========================================================
author: Tingting Zhao
date: Nov.17th, 2014
transition: rotate
width: 1440
height: 900
font-family: 'Helvetica'
css: my_style.css


Outline
========================================================
%For more details on authoring R presentations click the
%**Help** button on the toolbar.

- Faceting, automatically laying out multiple plots on a page
- Coordinate Systems



ggplot2 - facetting
===================
<small style="font-size:.7em">
Sometimes it can be convenient to visualize some characteristic of a dataset conditioning on different levels of other variables.
Such feature is readily available in ggplot2 using the `facets` argument. 

```{r qplot-on-iris-scatter-facet, echo=FALSE}
library(ggplot2)
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets=~Species)
```

---------------

Or if you prefer to facet by rows

```{r qplot-on-iris-scatter-facet2, echo=FALSE}
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets= Species~.)
```

</small>



Two Types of Faceting
========================================================
- facet_grid produces a 2d grid of panels defined by variables which form rows and columns
- facet_wrap produces a 1d ribbon of panels that is wrapped in 2d. 

![plot of chunk unnamed-chunk-2](GGPLOT2Chapter7-figure/gridAndwrap.png) 

Iris Data Set 
========================================================
<small style="font-size:.7em">
```{r plot}
library(ggplot2)
# Load the Iris data
data(iris)
plot(iris)
```
---------------
***
Have a look at the data set
```{r plot2}
# See what the iris data looks like
head(iris)
```
- one of the best known datasets in the pattern recognition literature. 
- **3 classes : Iris Setosa, Iris Versicolour, Iris Virginica.**
- 3 classes of 50 instances each, where each class refers to a type of iris plant. 
</small>


Facet Grid
========================================================
When we specify a faceting formula, we need to specify which variables should appear in the columns and which in the rows. For example, ``` .~. ``` is the default, neither rows nor columns are faceted, we obtain a single panel. 

```
.~ a  A single row with multiple columns
```
```{r by-default-single row}
qplot(Sepal.Length, Petal.Length, data=iris)+facet_grid(. ~ Species)
```
***
```
b~. A single column with multiple rows
```

```{r by-default-single column}
qplot(Sepal.Length, Petal.Length, data=iris)+facet_grid(Species~.)
```


Faceting by a Continuous Variable
==============================================
- Divide the data into **n** bins, each of the same length 
```
cut_interval(x, n=10)
```
- Specify the length of each interval.
```
cut_interval(x, length=1)
```
- Divide the data into **n** bins, each containing the same number of points
```
cut_number(x, n=10).
```
 **The range of each bin may be different.**
-------------------------------
```{r facet-by-continuous-r.v.}
iris_Eg = iris
iris_Eg$Petal.Width.Discrete = cut_interval(iris$Petal.Width, n=8)
qplot(x=Sepal.Width, y=Sepal.Length, data=iris_Eg, color=Petal.Width.Discrete)+facet_grid(Petal.Width.Discrete~Species)
```
``` a ~ b``` Multiple rows and multiple columns.

Margins
====================================

```{r facet margins}
qplot(x=Sepal.Width, y=Sepal.Length, data=iris_Eg, color=Petal.Width.Discrete)+facet_grid(Petal.Width.Discrete~Species, margins=T)
```
Faceting a plot is like a contingency table. As a result, we would like to display the marginal totals (totals over a row or column) as well as individual cells. We can achieve that by specifying **margins=T** in ```facet_grid()```.

Facet wrap
====================================
- **facet_wrap** makes a long ribbon of panels and wrap it into 2d.
- It is useful when we have a **single** variable with many levels and want to arrange the plots in a more efficient manner.
- Advangtage: It can be generated by any number of variables while **facet_grid** is generated by the combination of two or more variables.

Facet Wrap Example
===================================
```{r facet-wrap-hist}
library(plyr)
movies$decade <- round_any(movies$year, 10, floor)
qplot(rating, ..density.., data=subset(movies, decade > 1890),
  geom="histogram", binwidth = 0.5) +
  facet_wrap(~ decade, ncol = 6)
```
***
**facet_wrap** will lay out panels as close to square as possible with slight bias towards wider rather
than taller rectangles. We can change that by setting ```ncol, nrow```.
```{r facet-wrap-hist2}
qplot(rating, ..density.., data=subset(movies, decade > 1890),
  geom="histogram", binwidth = 0.5) +
  facet_wrap(~ decade, nrow = 3)
```

Controlling Scales
====================================
- ''For both types of faceting, we can control whether position scales are the same in all panels or allowed to vary between panels.''

**Options**
- scales = "fixed": x and y scales are fixed across all panels.
- scales = "free": x and y scales vary across panels.
- scales = "free_x": the x scale is free, and the y scale is fixed.
- scales = "free_y": the y scale is free, and the x scale is fixed.

Controlling Scales Example
===================================
- Free scales are especially useful when the data are in different scales in different levels of the 
variable on which we facet. For example, multiple time series with different scales of measures.
```{r time series scales}
library(reshape2)
em <- melt(economics, id = "date")
qplot(date, value, data = em, geom = "line", group = variable, color=variable) +
  facet_grid(variable ~ ., scale = "fixed")
```
***
```{r time series free scales}

qplot(date, value, data = em, geom = "line", group = variable, color=variable) +
  facet_grid(variable ~ ., scale = "free_y")
```

Controlling Scales Example 2
==========================================
- Additional constraint on the scales of **facet_grid**.
- all panels in a column must have the same x scale.
- **facet_grid** has an additional parameter **space** which is either *fixed* or *free*.
- When the space vary freely, each row (or column) will have height (or width) proportional to the range of the sclae for that row (or column).

Controlling Scales Example 2
==========================================

```{r controlling scales facet_grid space}
 mpg2 <- subset(mpg, cyl != 5 & drv %in% c("4", "f"))

mpg3 <- within(mpg2, {
  model <- reorder(model, cty)
  manufacturer <- reorder(manufacturer, -cty)
})
models <- qplot(cty, model, data = mpg3)
models

```
***
```{r controlling scales facet_grid space 2}
models + facet_grid(manufacturer ~ ., scales = "free",
  space = "free") +  opts(strip.text.y = theme_text())
```


Group and Faceting
============================================
- Faceting is used differentiate groups. It is good if the groups overlap a lot.
- When using aesthetics to differentiate groups, the groups are close together and small differences
are eaier to see.
- The next example is used to illustrate the trade-offs.

Group and Faceting Example
============================================
```{r group-faceting trade-offs}
xmaj <- c(0.3, 0.5, 1,3, 5)
xmin <- as.vector(outer(1:10, 10^c(-1, 0)))
ymaj <- c(500, 1000, 5000, 10000)
ymin <- as.vector(outer(1:10, 10^c(2,3,4)))
dplot <- ggplot(subset(diamonds, color %in% c("D","E","G","J")),
  aes(carat, price, colour = color)) +
  scale_x_log10(breaks = xmaj, labels = xmaj, minor = xmin) +
  scale_y_log10(breaks = ymaj, labels = ymaj, minor = ymin) +
  scale_colour_hue(limits = levels(diamonds$color)) +
  opts(legend.position = "none")
dplot + geom_point()
```
***
```{r group-faceting trade-offs-2}
dplot + geom_point() + facet_grid(. ~ color)
```

Faceting and Dodging
======================================
- Faceting and dodging can achieve similar effects.
- Main difference is the labelling.
- How to make choice between faceting and doding.


Faceting and Dodging Examples
=====================================
- Similarities
```{r similarities between faceting and dodging}
qplot(color, data=diamonds, geom = "bar", fill = cut,
  position="dodge")
```

***
```{r similarities between faceting and dodging-2}
qplot(cut, data = diamonds, geom = "bar", fill = cut) +
  facet_grid(. ~ color) +
  opts(axis.text.x = theme_text(angle = 90, hjust = 1, size = 8,
   colour = "grey50"))
#0 means left-justified
#1 means right-justified
```

Faceting and Dodging Examples
==========================================
- Differences
```{r faceting and dodging differences}

mpg4 <- subset(mpg, manufacturer %in%
  c("audi", "volkswagen", "jeep"))
mpg4$manufacturer <- as.character(mpg4$manufacturer)
mpg4$model <- as.character(mpg4$model)
base = ggplot(mpg4, aes(fill = model)) +
  geom_bar(position = "dodge") +
  opts(legend.position = "none")
base + aes(x = model) +
  facet_grid(. ~ manufacturer)

```
***
```{r faceting and dodging differences-2}
last_plot() +
  facet_grid(. ~ manufacturer, scales = "free_x", space = "free")
```


Faceting and Dodging Examples
==========================================
```{r facting and dodging differences-3}
base + aes(x = manufacturer)
```
***
- **Summaries**
- Faceting: advantages for nested data since we can control the labels.
- Completely crossed: both equivalent as shown in the Similarities slides.
- Almost crossed: faceting with shared scales displays all combinations.
- Nested : faceting with free scales and space allocates enough space for each higher level group and labels each individual item.

Practice
===========================================
How to create this data set with faceting using iris data set.
```{r qplot-on-iris-scatter-facet11, echo=FALSE}
library(ggplot2)
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets=~Species)
```

---------------

Or if you prefer to facet by rows

```{r qplot-on-iris-scatter-facet22, echo=FALSE}
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets= Species~.)
```

Solutions
===========================================
How to create this data set with faceting using iris data set.
```{r qplot-on-iris-scatter-facet-solution }
library(ggplot2)
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets=~Species)
```

---------------

Or if you prefer to facet by rows

```{r qplot-on-iris-scatter-facet-solution-2}
# Points and line
qplot(x=Sepal.Width, y=Sepal.Length, data=iris, geom=c("point","smooth"), color=Species, size=Petal.Width, method="lm", facets= Species~.)
```



